/*
 * Phonebook API
 * RESTful API for Messente phonebook
 *
 * OpenAPI spec version: 0.0.4
 * Contact: messente@messente.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.messente.phonebook;

import com.messente.ApiException;
import com.messente.phonebook.ContactEnvelope;
import com.messente.phonebook.ContactFields;
import com.messente.phonebook.ContactListEnvelope;
import com.messente.phonebook.ContactUpdateFields;
import com.messente.phonebook.EmptyObject;
import com.messente.phonebook.ErrorResponse;
import com.messente.phonebook.GroupListEnvelope;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContactsApi
 */
@Ignore
public class ContactsApiTest {

    private final ContactsApi api = new ContactsApi();

    
    /**
     * 
     *
     * Adds a contact to a group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addContactToGroupTest() throws ApiException {
        String groupId = null;
        String phone = null;
        EmptyObject response = api.addContactToGroup(groupId, phone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Creates a new contact.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContactTest() throws ApiException {
        ContactFields contactFields = null;
        ContactEnvelope response = api.createContact(contactFields);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Deletes a contact.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContactTest() throws ApiException {
        String phone = null;
        api.deleteContact(phone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Lists a contact.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchContactTest() throws ApiException {
        String phone = null;
        ContactEnvelope response = api.fetchContact(phone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Lists groups of a contact.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchContactGroupsTest() throws ApiException {
        String phone = null;
        GroupListEnvelope response = api.fetchContactGroups(phone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns all contacts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchContactsTest() throws ApiException {
        List<String> groupIds = null;
        ContactListEnvelope response = api.fetchContacts(groupIds);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Remove a contact from a group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeContactFromGroupTest() throws ApiException {
        String groupId = null;
        String phone = null;
        api.removeContactFromGroup(groupId, phone);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Updates a contact.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateContactTest() throws ApiException {
        String phone = null;
        ContactUpdateFields contactUpdateFields = null;
        ContactEnvelope response = api.updateContact(phone, contactUpdateFields);

        // TODO: test validations
    }
    
}
